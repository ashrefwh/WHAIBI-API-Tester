/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-scenarios/route";
exports.ids = ["app/api/generate-scenarios/route"];
exports.modules = {

/***/ "(rsc)/./app/api/generate-scenarios/route.ts":
/*!*********************************************!*\
  !*** ./app/api/generate-scenarios/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_groq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/groq */ \"(rsc)/./node_modules/@ai-sdk/groq/dist/index.mjs\");\n\n\n\nfunction parseCurlCommand(curlCommand) {\n    try {\n        const cleanCurl = curlCommand.replace(/\\^\"/g, '\"').replace(/\\^/g, \"\");\n        // Extract URL\n        const urlMatch = cleanCurl.match(/curl\\s+(?:-X\\s+\\w+\\s+)?['\"]*([^'\">\\s]+)['\"]*/);\n        const url = urlMatch ? urlMatch[1] : \"\";\n        const methodMatch = cleanCurl.match(/-X\\s+(\\w+)/);\n        let method = methodMatch ? methodMatch[1] : \"GET\";\n        // If no explicit method but has data, assume POST\n        if (!methodMatch && (cleanCurl.includes(\"--data-raw\") || cleanCurl.includes(\"--data\") || cleanCurl.includes(\"-d \"))) {\n            method = \"POST\";\n        }\n        // Extract headers\n        const headers = {};\n        const headerMatches = cleanCurl.matchAll(/-H\\s+['\"](.*?)['\"]/g);\n        for (const match of headerMatches){\n            const [key, ...valueParts] = match[1].split(\":\");\n            if (key && valueParts.length > 0) {\n                headers[key.trim()] = valueParts.join(\":\").trim();\n            }\n        }\n        let body = null;\n        // Try different data patterns\n        const dataPatterns = [\n            /--data-raw\\s+['\"](.*?)['\"](?:\\s|$)/s,\n            /--data-raw\\s+([^-\\s].*?)(?:\\s+-|$)/s,\n            /--data\\s+['\"](.*?)['\"](?:\\s|$)/s,\n            /-d\\s+['\"](.*?)['\"](?:\\s|$)/s\n        ];\n        for (const pattern of dataPatterns){\n            const dataMatch = cleanCurl.match(pattern);\n            if (dataMatch && dataMatch[1]) {\n                body = dataMatch[1];\n                break;\n            }\n        }\n        if (body) {\n            // Handle Windows command line escaping\n            body = body.replace(/\\\\\\\\/g, \"\\\\\") // Double backslashes\n            .replace(/\\\\\"/g, '\"') // Escaped quotes\n            .replace(/\\^\"/g, '\"') // Windows caret escaping\n            .replace(/\\^/g, \"\") // Remove remaining carets\n            ;\n            console.log(\"[v0] Extracted body:\", body.substring(0, 200) + \"...\");\n        }\n        console.log(\"[v0] Parsed cURL:\", {\n            url,\n            method,\n            hasBody: !!body,\n            headersCount: Object.keys(headers).length\n        });\n        return {\n            url,\n            method,\n            headers,\n            body\n        };\n    } catch (error) {\n        console.error(\"[v0] Error parsing cURL:\", error);\n        return {\n            url: \"\",\n            method: \"GET\",\n            headers: {},\n            body: null\n        };\n    }\n}\nfunction analyzeApiContext(parsedCurl) {\n    const { url, method, body } = parsedCurl;\n    // Extract endpoint information\n    const urlParts = url.toLowerCase().split(\"/\");\n    const queryParams = url.includes(\"?\") ? url.split(\"?\")[1] : \"\";\n    // Analyze URL structure for business context\n    const domainIndicators = {\n        auth: [\n            \"auth\",\n            \"login\",\n            \"register\",\n            \"signin\",\n            \"signup\",\n            \"token\",\n            \"oauth\"\n        ],\n        user: [\n            \"user\",\n            \"profile\",\n            \"account\",\n            \"member\",\n            \"customer\"\n        ],\n        company: [\n            \"company\",\n            \"organization\",\n            \"business\",\n            \"enterprise\",\n            \"corp\"\n        ],\n        product: [\n            \"product\",\n            \"item\",\n            \"catalog\",\n            \"inventory\",\n            \"goods\"\n        ],\n        order: [\n            \"order\",\n            \"purchase\",\n            \"transaction\",\n            \"payment\",\n            \"checkout\"\n        ],\n        content: [\n            \"post\",\n            \"article\",\n            \"blog\",\n            \"content\",\n            \"media\",\n            \"document\"\n        ],\n        finance: [\n            \"payment\",\n            \"invoice\",\n            \"billing\",\n            \"subscription\",\n            \"wallet\"\n        ],\n        communication: [\n            \"message\",\n            \"notification\",\n            \"email\",\n            \"sms\",\n            \"chat\"\n        ],\n        analytics: [\n            \"analytics\",\n            \"stats\",\n            \"metrics\",\n            \"report\",\n            \"dashboard\"\n        ],\n        admin: [\n            \"admin\",\n            \"management\",\n            \"config\",\n            \"settings\",\n            \"control\"\n        ],\n        iot: [\n            \"iot\",\n            \"sensor\",\n            \"device\",\n            \"capture\"\n        ]\n    };\n    let detectedDomain = \"generic\";\n    let confidence = 0;\n    // Analyze URL for domain indicators\n    for (const [domain, indicators] of Object.entries(domainIndicators)){\n        const matches = indicators.filter((indicator)=>urlParts.some((part)=>part.includes(indicator)) || queryParams.includes(indicator)).length;\n        if (matches > confidence) {\n            confidence = matches;\n            detectedDomain = domain;\n        }\n    }\n    // Analyze payload for additional context\n    let payloadContext = {};\n    if (body) {\n        try {\n            const bodyObj = JSON.parse(body);\n            const fields = Object.keys(bodyObj);\n            // Detect field patterns\n            const fieldPatterns = {\n                hasEmail: fields.some((f)=>f.toLowerCase().includes(\"email\")),\n                hasPassword: fields.some((f)=>f.toLowerCase().includes(\"password\")),\n                hasName: fields.some((f)=>f.toLowerCase().includes(\"name\")),\n                hasAddress: fields.some((f)=>f.toLowerCase().includes(\"address\")),\n                hasPhone: fields.some((f)=>f.toLowerCase().includes(\"phone\")),\n                hasPrice: fields.some((f)=>f.toLowerCase().includes(\"price\") || f.toLowerCase().includes(\"amount\")),\n                hasDate: fields.some((f)=>f.toLowerCase().includes(\"date\") || f.toLowerCase().includes(\"time\")),\n                hasId: fields.some((f)=>f.toLowerCase().includes(\"id\")),\n                hasStatus: fields.some((f)=>f.toLowerCase().includes(\"status\")),\n                hasType: fields.some((f)=>f.toLowerCase().includes(\"type\"))\n            };\n            // Refine domain detection based on payload\n            if (fieldPatterns.hasEmail && fieldPatterns.hasPassword) {\n                detectedDomain = \"auth\";\n                confidence += 2;\n            } else if (fieldPatterns.hasPrice && fieldPatterns.hasName) {\n                detectedDomain = \"product\";\n                confidence += 2;\n            } else if (fieldPatterns.hasAddress && fieldPatterns.hasPhone) {\n                detectedDomain = \"user\";\n                confidence += 2;\n            }\n            payloadContext = {\n                fields,\n                patterns: fieldPatterns,\n                sampleData: bodyObj\n            };\n        } catch (e) {\n        // Invalid JSON, keep as generic\n        }\n    }\n    return {\n        domain: detectedDomain,\n        confidence,\n        endpoint: urlParts[urlParts.length - 1] || \"unknown\",\n        resource: urlParts[urlParts.length - 2] || \"unknown\",\n        payloadContext,\n        businessContext: generateBusinessContext(detectedDomain, payloadContext)\n    };\n}\nfunction generateBusinessContext(domain, payloadContext) {\n    const contexts = {\n        auth: \"API d'authentification - gestion des connexions, inscriptions et tokens\",\n        user: \"API de gestion utilisateurs - profils, comptes et données personnelles\",\n        company: \"API de gestion d'entreprises - organisations, sociétés et entités business\",\n        product: \"API de gestion produits - catalogue, inventaire et références\",\n        order: \"API de commandes - transactions, achats et processus de vente\",\n        content: \"API de contenu - articles, médias et publications\",\n        finance: \"API financière - paiements, facturation et transactions monétaires\",\n        communication: \"API de communication - messages, notifications et échanges\",\n        analytics: \"API d'analytics - statistiques, métriques et rapports\",\n        admin: \"API d'administration - configuration, gestion et contrôle système\",\n        iot: \"API IoT - gestion des capteurs et appareils\",\n        generic: \"API générique - fonctionnalités diverses\"\n    };\n    return contexts[domain] || contexts.generic;\n}\nasync function POST(request) {\n    try {\n        const { curlCommand, explanation, staticAttributes = [] } = await request.json();\n        if (!curlCommand) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Commande cURL requise\"\n            }, {\n                status: 400\n            });\n        }\n        if (!explanation) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Explication requise pour aider l'IA à comprendre le contexte\"\n            }, {\n                status: 400\n            });\n        }\n        const parsedCurl = parseCurlCommand(curlCommand);\n        const apiContext = analyzeApiContext(parsedCurl);\n        console.log(\"[v0] Analyzed API context:\", {\n            domain: apiContext.domain,\n            confidence: apiContext.confidence,\n            businessContext: apiContext.businessContext\n        });\n        const staticAttributesText = staticAttributes.length > 0 ? `\\n🔒 **ATTRIBUTS STATIQUES OBLIGATOIRES (NE JAMAIS MODIFIER):**\\n${staticAttributes.map((attr)=>`- **${attr.name}**: TOUJOURS \"${attr.value}\" (valeur fixe dans TOUS les scénarios)`).join(\"\\n\")}\\n` : \"\";\n        const prompt = `\nTu es un EXPERT DOCTEUR en QA et tests d'API avec 20+ ans d'expérience. Tu dois analyser ce cURL comme un ingénieur QA senior avec 20+ ans d'experience et générer une suite complète de tests professionnels.\n\nCOMMANDE cURL À ANALYSER:\n${curlCommand}\n\n🎯 **EXPLICATION UTILISATEUR (CONTEXTE MÉTIER CRITIQUE):**\n${explanation}\n${staticAttributesText}\nCONTEXTE MÉTIER DÉTECTÉ:\n- **Domaine**: ${apiContext.domain} (confiance: ${apiContext.confidence})\n- **Description**: ${apiContext.businessContext}\n- **Endpoint**: ${apiContext.endpoint}\n- **Méthode**: ${parsedCurl.method}\n- **URL**: ${parsedCurl.url}\n- **Payload présent**: ${!!parsedCurl.body}\n${apiContext.payloadContext.fields ? `- **Champs**: ${apiContext.payloadContext.fields.join(\", \")}` : \"\"}\n\n🚨 **RÈGLE CRITIQUE - JAMAIS INVENTER DE NOUVEAUX CHAMPS** 🚨\n**INTERDICTION ABSOLUE :**\n❌ **TU NE DOIS JAMAIS AJOUTER DE NOUVEAUX CHAMPS** qui n'existent pas dans le cURL original\n❌ **INTERDIT** : \"timestamp\", \"largeField\", \"specialChars\", \"nullField\", etc.\n✅ **OBLIGATOIRE** : Utiliser UNIQUEMENT les champs présents dans le payload original\n\n**EXEMPLE CONCRET :**\nSi le cURL contient : {\"name\": \"test\", \"email\": \"test@example.com\"}\n❌ INTERDIT : {\"name\": \"test\", \"email\": \"test@example.com\", \"timestamp\": 1234567890}\n✅ CORRECT : {\"name\": \"TechSolutions\", \"email\": \"jean.martin.1234@example.com\"}\n\n🚨 **RÈGLE CRITIQUE D'ISOLATION DES TESTS - EXPERT QA 15+ ANS** 🚨\nPRINCIPE FONDAMENTAL : UN TEST = UN SEUL PROBLÈME À LA FOIS\n\n**ISOLATION PARFAITE OBLIGATOIRE :**\n1. **Test \"name invalide\"** → name: INVALIDE, TOUS autres champs: VALIDES + UNIQUES\n2. **Test \"email invalide\"** → email: INVALIDE, TOUS autres champs: VALIDES + UNIQUES  \n3. **Test \"linkedin invalide\"** → linkedin: INVALIDE, TOUS autres champs: VALIDES + UNIQUES\n\n**EXEMPLE CONCRET D'ISOLATION :**\n❌ MAUVAIS: Test \"name invalide\" avec email existant → Erreur 409 \"Email exists\" (masque l'erreur de name)\n✅ CORRECT: Test \"name invalide\" avec email unique → Erreur 400 \"Name invalid\" (isole le problème)\n\n🔒 **RÈGLE ABSOLUE POUR ATTRIBUTS STATIQUES** 🔒\n${staticAttributes.length > 0 ? `LES CHAMPS SUIVANTS DOIVENT AVOIR EXACTEMENT CES VALEURS DANS TOUS LES SCÉNARIOS :\n${staticAttributes.map((attr)=>`- \"${attr.name}\": \"${attr.value}\" (JAMAIS d'autre valeur !)`).join(\"\\n\")}\n\n**ISOLATION AVEC ATTRIBUTS STATIQUES :**\n- Attributs statiques : TOUJOURS leurs valeurs fixes\n- Champ testé : INVALIDE (si c'est un test d'erreur)\n- TOUS autres champs : VALIDES + UNIQUES (emails avec timestamps, etc.)\n\nTU NE DOIS JAMAIS GÉNÉRER D'AUTRES VALEURS POUR CES CHAMPS !` : \"Aucun attribut statique spécifié.\"}\n\n**UTILISE L'EXPLICATION UTILISATEUR POUR:**\n1. **Comprendre les contraintes métier** (types acceptés, formats, règles de validation)\n2. **Générer des données conformes** aux spécifications utilisateur\n3. **Créer des tests pertinents** selon les règles métier expliquées\n4. **Adapter les scénarios** aux cas d'usage réels décrits\n5. **RESPECTER ABSOLUMENT** les attributs statiques spécifiés\n6. **ASSURER L'ISOLATION PARFAITE** de chaque test\n7. **NE JAMAIS INVENTER DE NOUVEAUX CHAMPS** non présents dans le cURL\n\n**GÉNÉRATION DE DONNÉES RÉALISTES - EXEMPLES CONCRETS:**\n\n❌ **INTERDIT** : \"TestUser1234567890\", \"TestName1755943608718\", \"TestValue123456\"\n✅ **OBLIGATOIRE** : Données humaines réalistes avec unicité discrète\n\n**EXEMPLES PRÉCIS PAR TYPE DE CHAMP:**\n\n**Prénoms (firstName, first_name):**\n- ✅ \"Jean\", \"Marie\", \"Pierre\", \"Sophie\"\n- ❌ \"TestUser1234567890\", \"TestName1755943608718\"\n\n**Noms (lastName, last_name):**\n- ✅ \"Martin\", \"Dubois\", \"Bernard\", \"Moreau\"\n- ❌ \"TestFamily1234567890\", \"TestLastName1755943608718\"\n\n**Noms d'entreprise (name, companyName):**\n- ✅ \"TechSolutions\", \"InnovaCorp\", \"DigitalPro\"\n- ❌ \"TestName1755943608718\", \"TestCompany1234567890\"\n\n**Types d'entreprise (companyType, type):**\n- Utilise EXACTEMENT les valeurs mentionnées dans l'explication utilisateur OU les attributs statiques\n- ✅ Selon explication: \"IT_SERVICES_COMPANY\", \"END_CLIENT\", etc.\n- ❌ \"TestValue1755943608718\", \"TestType1234567890\"\n\n**Emails (UNICITÉ OBLIGATOIRE):**\n- ✅ \"jean.martin.2024@example.com\", \"marie.dubois.test@example.com\"\n- ❌ \"test.user@example.com\", emails dupliqués\n\n**Sites web (UNICITÉ OBLIGATOIRE):**\n- ✅ \"https://techsolutions.com\", \"https://innovacorp.fr\"\n- ❌ \"https://www.test.com\", URLs dupliquées\n\n**LinkedIn (UNICITÉ OBLIGATOIRE):**\n- ✅ \"https://linkedin.com/company/techsolutions\"\n- ❌ \"https://www.linkedin.com/company/test\", URLs dupliquées\n\n**STRATÉGIE D'UNICITÉ POUR ISOLATION :**\n- **Emails** : Ajouter suffixe unique (timestamp discret) : \"jean.martin.1234@example.com\"\n- **URLs** : Varier les noms de domaine : \"techsolutions.com\", \"innovacorp.fr\"\n- **Noms humains** : Peuvent être dupliqués (Jean, Marie sont OK)\n- **IDs/Codes** : Toujours uniques avec suffixes\n\n**ISOLATION PARFAITE - EXEMPLE CONCRET :**\n❌ MAUVAIS: Test \"linkedin invalide\" avec firstName: \"TestUser\", email: \"existing@email.com\"\n✅ CORRECT: Test \"linkedin invalide\" avec firstName: \"Jean\", email: \"jean.martin.unique@example.com\", linkedin: \"invalid-url\"\n\n**MISSION**: Génère 12-15 scénarios avec données HUMAINES RÉALISTES selon le contexte métier détecté ET l'explication utilisateur, en respectant l'ISOLATION PARFAITE des tests ET les attributs statiques obligatoires, SANS JAMAIS INVENTER DE NOUVEAUX CHAMPS.\n\n**FORMAT DE RÉPONSE OBLIGATOIRE:**\n{\n  \"scenarios\": [\n    {\n      \"name\": \"Nom descriptif du test\",\n      \"description\": \"Description détaillée du cas testé avec isolation parfaite\",\n      \"method\": \"${parsedCurl.method}\",\n      \"url\": \"${parsedCurl.url}\",\n      \"headers\": {...},\n      \"body\": \"...\", // UNIQUEMENT les champs du cURL original avec données HUMAINES RÉALISTES + ISOLATION PARFAITE + attributs statiques respectés\n      \"expectedStatus\": 200\n    }\n  ]\n}\n\nGÉNÈRE MAINTENANT 12-15 SCÉNARIOS AVEC ISOLATION PARFAITE, DONNÉES HUMAINES RÉALISTES, RESPECT ABSOLU DES ATTRIBUTS STATIQUES ET SANS JAMAIS INVENTER DE NOUVEAUX CHAMPS !\n`;\n        console.log(\"[v0] Sending comprehensive QA expert prompt with user explanation and static attributes to AI...\");\n        const result = await (0,ai__WEBPACK_IMPORTED_MODULE_1__.generateText)({\n            model: (0,_ai_sdk_groq__WEBPACK_IMPORTED_MODULE_2__.groq)(\"llama-3.3-70b-versatile\"),\n            prompt,\n            maxTokens: 6000\n        });\n        let scenarios;\n        try {\n            let jsonString = result.text.trim();\n            console.log(\"[v0] Raw AI response length:\", jsonString.length);\n            // Clean up AI response\n            const introPatterns = [\n                /^.*?(?=\\{)/s,\n                /```json\\s*/gi,\n                /```\\s*/gi\n            ];\n            for (const pattern of introPatterns){\n                jsonString = jsonString.replace(pattern, \"\");\n            }\n            const codeBlockMatch = jsonString.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n            if (codeBlockMatch) {\n                jsonString = codeBlockMatch[1].trim();\n            }\n            const firstBraceIndex = jsonString.indexOf(\"{\");\n            if (firstBraceIndex === -1) {\n                throw new Error(\"No JSON object found in AI response\");\n            }\n            let braceCount = 0;\n            let endIndex = -1;\n            for(let i = firstBraceIndex; i < jsonString.length; i++){\n                const char = jsonString[i];\n                if (char === \"{\") {\n                    braceCount++;\n                } else if (char === \"}\") {\n                    braceCount--;\n                    if (braceCount === 0) {\n                        endIndex = i;\n                        break;\n                    }\n                }\n            }\n            if (endIndex === -1) {\n                throw new Error(\"Incomplete JSON object in AI response\");\n            }\n            jsonString = jsonString.substring(firstBraceIndex, endIndex + 1);\n            jsonString = jsonString.replace(/,(\\s*[}\\]])/g, \"$1\").replace(/([{,]\\s*)(\\w+):/g, '$1\"$2\":').trim();\n            console.log(\"[v0] Cleaned JSON length:\", jsonString.length);\n            scenarios = JSON.parse(jsonString);\n            if (!scenarios.scenarios || !Array.isArray(scenarios.scenarios)) {\n                throw new Error(\"Invalid scenarios structure in AI response\");\n            }\n            console.log(\"[v0] Successfully parsed\", scenarios.scenarios.length, \"scenarios from AI\");\n        } catch (parseError) {\n            console.error(\"[v0] AI JSON parsing failed, generating comprehensive fallback:\", parseError);\n            scenarios = generateComprehensiveFallback(parsedCurl, apiContext, staticAttributes);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            scenarios: scenarios.scenarios\n        });\n    } catch (error) {\n        console.error(\"[v0] Error generating scenarios:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Erreur génération scénarios: ${error instanceof Error ? error.message : \"Erreur inconnue\"}`\n        }, {\n            status: 500\n        });\n    }\n}\nfunction analyzeFieldContext(fieldName, domain) {\n    const lowerField = fieldName.toLowerCase();\n    // Human names - never need timestamps, can be duplicated\n    if (lowerField.match(/^(first_?name|last_?name|given_?name|family_?name|prenom|nom)$/)) {\n        return {\n            needsUniqueness: false,\n            dataType: \"human_name\",\n            isHumanReadable: true\n        };\n    }\n    // Contact fields that need uniqueness\n    if (lowerField.includes(\"email\") || lowerField.includes(\"username\") || lowerField.includes(\"login\")) {\n        return {\n            needsUniqueness: true,\n            dataType: \"contact\",\n            isHumanReadable: true\n        };\n    }\n    // URLs that need uniqueness\n    if (lowerField.includes(\"url\") || lowerField.includes(\"website\") || lowerField.includes(\"linkedin\")) {\n        return {\n            needsUniqueness: true,\n            dataType: \"url\",\n            isHumanReadable: true\n        };\n    }\n    // Business names - context dependent\n    if (lowerField.includes(\"name\") && !lowerField.includes(\"first\") && !lowerField.includes(\"last\")) {\n        if (domain === \"company\" || lowerField.includes(\"company\") || lowerField.includes(\"business\")) {\n            return {\n                needsUniqueness: true,\n                dataType: \"business_name\",\n                isHumanReadable: true\n            };\n        }\n        if (lowerField.includes(\"product\") || lowerField.includes(\"item\")) {\n            return {\n                needsUniqueness: true,\n                dataType: \"business_name\",\n                isHumanReadable: true\n            };\n        }\n        // Generic name field\n        return {\n            needsUniqueness: true,\n            dataType: \"business_name\",\n            isHumanReadable: true\n        };\n    }\n    // IDs and identifiers always need uniqueness\n    if (lowerField.includes(\"id\") || lowerField.includes(\"ref\") || lowerField.includes(\"code\")) {\n        return {\n            needsUniqueness: true,\n            dataType: \"identifier\",\n            isHumanReadable: false\n        };\n    }\n    // Phone numbers need uniqueness\n    if (lowerField.includes(\"phone\") || lowerField.includes(\"tel\")) {\n        return {\n            needsUniqueness: true,\n            dataType: \"contact\",\n            isHumanReadable: false\n        };\n    }\n    // Default: generic field that might need uniqueness\n    return {\n        needsUniqueness: false,\n        dataType: \"generic\",\n        isHumanReadable: true\n    };\n}\nfunction generateComprehensiveFallback(parsedCurl, apiContext, staticAttributes = []) {\n    const { url, method, headers, body } = parsedCurl;\n    const timestamp = Date.now();\n    console.log(\"[v0] Generating comprehensive fallback with 12+ scenarios for domain:\", apiContext.domain);\n    const scenarios = [];\n    // 1. TESTS MÉTIER SPÉCIALISÉS\n    if (body) {\n        try {\n            const bodyObj = JSON.parse(body);\n            const fields = Object.keys(bodyObj);\n            // Test valide avec données modifiées\n            scenarios.push({\n                name: `${apiContext.domain} - Données valides`,\n                description: `Test nominal avec données valides pour ${apiContext.businessContext}`,\n                method,\n                url,\n                headers: {\n                    ...headers\n                },\n                body: JSON.stringify(generateValidTestData(bodyObj, apiContext.domain, timestamp, staticAttributes)),\n                expectedStatus: method === \"POST\" ? 201 : 200\n            });\n            // Tests de validation par champ avec isolation parfaite\n            fields.forEach((field, index)=>{\n                if (index < 4) {\n                    // Increased to 4 fields for better coverage\n                    // Generate base valid data with unique values\n                    const baseValidData = generateValidTestData(bodyObj, apiContext.domain, timestamp + index, staticAttributes);\n                    // Then make ONLY the target field invalid (unless it's a static attribute)\n                    const isStaticField = staticAttributes.some((attr)=>attr.name === field);\n                    if (!isStaticField) {\n                        const invalidData = {\n                            ...baseValidData\n                        };\n                        invalidData[field] = generateInvalidValue(field, bodyObj[field]);\n                        scenarios.push({\n                            name: `Validation - ${field} invalide`,\n                            description: `Test avec ${field} contenant une valeur invalide, tous autres champs valides et uniques`,\n                            method,\n                            url,\n                            headers: {\n                                ...headers\n                            },\n                            body: JSON.stringify(invalidData),\n                            expectedStatus: 400\n                        });\n                    }\n                }\n            });\n            // Test champs manquants avec données valides et uniques\n            const requiredField = fields.find((field)=>!staticAttributes.some((attr)=>attr.name === field)) || fields[0];\n            const validDataForMissingTest = generateValidTestData(bodyObj, apiContext.domain, timestamp + 100, staticAttributes);\n            delete validDataForMissingTest[requiredField];\n            scenarios.push({\n                name: `Validation - ${requiredField} manquant`,\n                description: `Test avec champ obligatoire ${requiredField} manquant, autres champs valides et uniques`,\n                method,\n                url,\n                headers: {\n                    ...headers\n                },\n                body: JSON.stringify(validDataForMissingTest),\n                expectedStatus: 400\n            });\n        } catch (e) {\n            console.log(\"[v0] Could not parse body for detailed validation tests\");\n        }\n    }\n    // 2. TESTS DE SÉCURITÉ\n    scenarios.push({\n        name: \"Sécurité - Authentification manquante\",\n        description: \"Test sans token d'authentification\",\n        method,\n        url,\n        headers: {\n            ...headers,\n            Authorization: undefined\n        },\n        body: body || undefined,\n        expectedStatus: 401\n    }, {\n        name: \"Sécurité - Token invalide\",\n        description: \"Test avec token d'authentification invalide\",\n        method,\n        url,\n        headers: {\n            ...headers,\n            Authorization: \"Bearer invalid_token_12345\"\n        },\n        body: body || undefined,\n        expectedStatus: 401\n    }, {\n        name: \"Sécurité - Injection SQL\",\n        description: \"Test d'injection SQL dans les paramètres\",\n        method,\n        url: url.includes(\"?\") ? `${url}&id=1' OR '1'='1` : `${url}?id=1' OR '1'='1`,\n        headers: {\n            ...headers\n        },\n        body: body || undefined,\n        expectedStatus: 400\n    });\n    // 3. TESTS DE PERFORMANCE - Using only original payload structure\n    if (body) {\n        try {\n            const bodyObj = JSON.parse(body);\n            scenarios.push({\n                name: \"Performance - Rate limiting\",\n                description: \"Test de limitation de taux\",\n                method,\n                url,\n                headers: {\n                    ...headers,\n                    \"X-Test-Rate-Limit\": \"true\"\n                },\n                body: JSON.stringify(generateValidTestData(bodyObj, apiContext.domain, timestamp + 200, staticAttributes)),\n                expectedStatus: 429\n            });\n        } catch (e) {\n            scenarios.push({\n                name: \"Performance - Rate limiting\",\n                description: \"Test de limitation de taux\",\n                method,\n                url,\n                headers: {\n                    ...headers,\n                    \"X-Test-Rate-Limit\": \"true\"\n                },\n                body: body || undefined,\n                expectedStatus: 429\n            });\n        }\n    }\n    // 4. TESTS D'ERREURS HTTP\n    scenarios.push({\n        name: \"Erreur - Ressource inexistante\",\n        description: \"Test avec ID de ressource inexistant\",\n        method,\n        url: url.replace(/\\/\\d+/, \"/999999\"),\n        headers: {\n            ...headers\n        },\n        body: body || undefined,\n        expectedStatus: 404\n    }, {\n        name: \"Erreur - Conflit de données\",\n        description: \"Test de création avec données en conflit\",\n        method,\n        url,\n        headers: {\n            ...headers\n        },\n        body: body || undefined,\n        expectedStatus: 409\n    });\n    console.log(\"[v0] Generated\", scenarios.length, \"comprehensive test scenarios\");\n    return {\n        scenarios\n    };\n}\nfunction generateValidTestData(originalData, domain, timestamp, staticAttributes = []) {\n    const testData = {\n        ...originalData\n    };\n    staticAttributes.forEach((attr)=>{\n        if (testData.hasOwnProperty(attr.name)) {\n            testData[attr.name] = attr.value;\n            console.log(`[v0] Applied static attribute: ${attr.name} = ${attr.value}`);\n        }\n    });\n    const realisticData = {\n        firstNames: [\n            \"Jean\",\n            \"Marie\",\n            \"Pierre\",\n            \"Sophie\",\n            \"Ahmed\",\n            \"Fatima\",\n            \"David\",\n            \"Sarah\",\n            \"Lucas\",\n            \"Emma\",\n            \"Thomas\",\n            \"Julie\",\n            \"Nicolas\",\n            \"Camille\",\n            \"Alexandre\"\n        ],\n        lastNames: [\n            \"Martin\",\n            \"Dubois\",\n            \"Bernard\",\n            \"Moreau\",\n            \"Petit\",\n            \"Robert\",\n            \"Richard\",\n            \"Durand\",\n            \"Leroy\",\n            \"Simon\",\n            \"Laurent\",\n            \"Lefebvre\",\n            \"Michel\",\n            \"Garcia\"\n        ],\n        companyNames: [\n            \"TechSolutions\",\n            \"InnovaCorp\",\n            \"DigitalPro\",\n            \"SmartBusiness\",\n            \"FutureTech\",\n            \"ProServices\",\n            \"EliteConsulting\",\n            \"NextGen\",\n            \"DataFlow\",\n            \"CloudTech\",\n            \"WebMaster\",\n            \"CodeCraft\",\n            \"InnovateLab\",\n            \"TechVision\",\n            \"DigitalEdge\"\n        ],\n        companyTypes: [\n            \"IT_SERVICES_COMPANY\",\n            \"CONSULTING\",\n            \"MANUFACTURING\",\n            \"RETAIL\",\n            \"FINANCE\",\n            \"HEALTHCARE\",\n            \"EDUCATION\",\n            \"LOGISTICS\"\n        ],\n        productNames: [\n            \"Smartphone Pro\",\n            \"Laptop Gaming\",\n            \"Casque Audio\",\n            \"Tablette Design\",\n            \"Montre Connectée\",\n            \"Écouteurs Sans Fil\"\n        ],\n        domains: [\n            \".com\",\n            \".fr\",\n            \".net\",\n            \".org\",\n            \".io\",\n            \".tech\"\n        ],\n        linkedinSuffixes: [\n            \"\",\n            \"-corp\",\n            \"-group\",\n            \"-solutions\",\n            \"-tech\",\n            \"-consulting\"\n        ]\n    };\n    Object.keys(testData).forEach((key)=>{\n        const isStaticField = staticAttributes.some((attr)=>attr.name === key);\n        if (isStaticField) {\n            return; // Skip processing, value already set above\n        }\n        const lowerKey = key.toLowerCase();\n        const fieldContext = analyzeFieldContext(key, domain);\n        const index = Math.abs(timestamp + key.length) % 1000;\n        if (lowerKey.includes(\"email\")) {\n            const firstName = realisticData.firstNames[index % realisticData.firstNames.length].toLowerCase();\n            const lastName = realisticData.lastNames[index % realisticData.lastNames.length].toLowerCase();\n            testData[key] = `${firstName}.${lastName}.${timestamp}@example.com`;\n        } else if (fieldContext.dataType === \"human_name\") {\n            if (lowerKey.includes(\"first\")) {\n                testData[key] = realisticData.firstNames[index % realisticData.firstNames.length];\n            } else {\n                testData[key] = realisticData.lastNames[index % realisticData.lastNames.length];\n            }\n        } else if (fieldContext.dataType === \"business_name\") {\n            const baseName = domain === \"company\" || lowerKey.includes(\"company\") ? realisticData.companyNames[index % realisticData.companyNames.length] : lowerKey.includes(\"product\") ? realisticData.productNames[index % realisticData.productNames.length] : realisticData.companyNames[index % realisticData.companyNames.length];\n            testData[key] = fieldContext.needsUniqueness && lowerKey === \"name\" ? `${baseName} ${index}` : baseName;\n        } else if (lowerKey.includes(\"type\") && (domain === \"company\" || lowerKey.includes(\"company\"))) {\n            testData[key] = realisticData.companyTypes[index % realisticData.companyTypes.length];\n        } else if (lowerKey.includes(\"phone\")) {\n            const phoneNumber = `0${Math.floor(Math.random() * 9) + 1}${(timestamp % 100000000).toString().padStart(8, \"0\")}`;\n            testData[key] = phoneNumber;\n        } else if (lowerKey.includes(\"linkedin\")) {\n            const companyName = realisticData.companyNames[index % realisticData.companyNames.length].toLowerCase().replace(/\\s+/g, \"\");\n            const suffix = realisticData.linkedinSuffixes[index % realisticData.linkedinSuffixes.length];\n            testData[key] = `https://linkedin.com/company/${companyName}${suffix}-${timestamp}`;\n        } else if (lowerKey.includes(\"website\") || lowerKey.includes(\"url\") && !lowerKey.includes(\"linkedin\")) {\n            const companyName = realisticData.companyNames[index % realisticData.companyNames.length].toLowerCase().replace(/\\s+/g, \"\");\n            const domain = realisticData.domains[index % realisticData.domains.length];\n            testData[key] = `https://${companyName}-${timestamp}${domain}`;\n        } else if (lowerKey.includes(\"password\")) {\n            const passwords = [\n                \"SecurePass123!\",\n                \"MyPassword2024!\",\n                \"StrongPwd456!\",\n                \"SafeLogin789!\"\n            ];\n            testData[key] = passwords[index % passwords.length];\n        } else if (lowerKey.includes(\"price\") || lowerKey.includes(\"amount\")) {\n            testData[key] = Number.parseFloat((Math.random() * 1000 + 10).toFixed(2));\n        } else if (fieldContext.dataType === \"identifier\") {\n            testData[key] = `${lowerKey}_${timestamp}_${index}`;\n        } else if (typeof testData[key] === \"string\" && testData[key].length > 10) {\n            if (fieldContext.isHumanReadable) {\n                const baseName = domain === \"company\" ? realisticData.companyNames[index % realisticData.companyNames.length] : domain === \"product\" ? realisticData.productNames[index % realisticData.productNames.length] : \"Valeur Réaliste\";\n                testData[key] = fieldContext.needsUniqueness ? `${baseName} ${timestamp}` : baseName;\n            } else {\n                testData[key] = `value_${timestamp}_${index}`;\n            }\n        }\n    });\n    return testData;\n}\nfunction generateInvalidValue(fieldName, originalValue) {\n    const lowerField = fieldName.toLowerCase();\n    if (lowerField.includes(\"email\")) {\n        return \"invalid-email-format-without-at-symbol\";\n    } else if (lowerField.includes(\"phone\")) {\n        return \"invalid-phone-123abc\";\n    } else if (lowerField.includes(\"url\") || lowerField.includes(\"website\") || lowerField.includes(\"linkedin\")) {\n        return \"not-a-valid-url-format\";\n    } else if (lowerField.includes(\"password\")) {\n        return \"123\" // Too weak password\n        ;\n    } else if (lowerField.includes(\"name\") && typeof originalValue === \"string\") {\n        return \"x\".repeat(1000);\n    } else if (typeof originalValue === \"number\") {\n        return -999999 // Invalid negative number\n        ;\n    } else if (typeof originalValue === \"boolean\") {\n        return \"not-a-boolean-value\";\n    } else if (typeof originalValue === \"string\") {\n        return \"x\".repeat(1000) // Too long string\n        ;\n    }\n    return null // Invalid null value\n    ;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-scenarios/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-scenarios%2Froute&page=%2Fapi%2Fgenerate-scenarios%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-scenarios%2Froute.ts&appDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-scenarios%2Froute&page=%2Fapi%2Fgenerate-scenarios%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-scenarios%2Froute.ts&appDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_DELL_Downloads_WhaibiTesterAPI_app_api_generate_scenarios_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-scenarios/route.ts */ \"(rsc)/./app/api/generate-scenarios/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-scenarios/route\",\n        pathname: \"/api/generate-scenarios\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-scenarios/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\DELL\\\\Downloads\\\\WhaibiTesterAPI\\\\app\\\\api\\\\generate-scenarios\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_DELL_Downloads_WhaibiTesterAPI_app_api_generate_scenarios_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1zY2VuYXJpb3MlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLXNjZW5hcmlvcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLXNjZW5hcmlvcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNERUxMJTVDRG93bmxvYWRzJTVDV2hhaWJpVGVzdGVyQVBJJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNERUxMJTVDRG93bmxvYWRzJTVDV2hhaWJpVGVzdGVyQVBJJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNtQztBQUNoSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcREVMTFxcXFxEb3dubG9hZHNcXFxcV2hhaWJpVGVzdGVyQVBJXFxcXGFwcFxcXFxhcGlcXFxcZ2VuZXJhdGUtc2NlbmFyaW9zXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZS1zY2VuYXJpb3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9nZW5lcmF0ZS1zY2VuYXJpb3NcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dlbmVyYXRlLXNjZW5hcmlvcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXERFTExcXFxcRG93bmxvYWRzXFxcXFdoYWliaVRlc3RlckFQSVxcXFxhcHBcXFxcYXBpXFxcXGdlbmVyYXRlLXNjZW5hcmlvc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-scenarios%2Froute&page=%2Fapi%2Fgenerate-scenarios%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-scenarios%2Froute.ts&appDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/zod","vendor-chunks/@ai-sdk","vendor-chunks/eventsource-parser","vendor-chunks/ai"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-scenarios%2Froute&page=%2Fapi%2Fgenerate-scenarios%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-scenarios%2Froute.ts&appDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDELL%5CDownloads%5CWhaibiTesterAPI&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();